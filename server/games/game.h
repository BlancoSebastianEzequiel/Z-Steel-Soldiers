// "Copyright [2017] <Copyright SebastianBlanco>"
//------------------------------------------------------------------------------
#ifndef GAME_H
#define GAME_H
//------------------------------------------------------------------------------
class Player;
class Unit;
class Task;
class NodePath;
class Team;
class Armament;
class ProxyClient;
//------------------------------------------------------------------------------
#include <cstddef>
#include <vector>
#include <string>
#include <cstdint>
#include <queue>
#include <stack>
#include <mutex>
#include "../maps/map.h"
#include "../../libs/Dicc.h"
#include "../../libs/Heap.h"
#include "../../libs/Parser.h"
#include "../interpreter/interpreter.h"
//------------------------------------------------------------------------------
typedef std::queue<NodePath*> Path;
typedef Dicc<size_t , Unit*> unitsMap;
typedef Dicc<size_t, Armament*> munitionsMap;
//------------------------------------------------------------------------------
class Game {
 public :
    uint32_t unitsQuant;
    uint32_t munitionQuant;
    uint32_t playersQuant;
    Map gameMap;
 private :
    Parser aParser;
    unitsMap units;
    Dicc<size_t, Player*> players;
    munitionsMap munitions;
    Dicc<size_t, Team*> teams;
    bool finish;
    Heap<Task*> tasks;
    unitsMap deadUnits;
    munitionsMap impactedMunitions;
    objectsMap brokenObjects;
    Interpreter interpreter;
    std::vector<std::string> initialModel;
    std::vector<std::string> model;
    std::mutex aMutex;
 public :
    //--------------------------------------------------------------------------
    explicit Game(char* mapFileName);
    //--------------------------------------------------------------------------
    ~Game();
    //--------------------------------------------------------------------------
    //**************************************************************************
    // COMMUNICATION
    //**************************************************************************
    //--------------------------------------------------------------------------
    msg_t receivePetition(const std::string &petition);
    //--------------------------------------------------------------------------
    const std::vector<std::string> getModel();
    //--------------------------------------------------------------------------
    const std::vector<std::string> getInitialModel();
    //--------------------------------------------------------------------------
    //**************************************************************************
    // CREATE PLAYER AND UNITS
    //**************************************************************************
    //--------------------------------------------------------------------------
    msg_t createPlayer(size_t idTeam);
    //--------------------------------------------------------------------------
    void killPlayer(size_t idPlayer);
    //--------------------------------------------------------------------------
    Player* getPlayer(size_t idPlayer);
    //--------------------------------------------------------------------------
    msg_t createUnit(size_t idBuilding, size_t type);
    //--------------------------------------------------------------------------
    void createMunition(size_t idUnit, size_t type);
    //--------------------------------------------------------------------------
    msg_t update();
    //--------------------------------------------------------------------------
    uint32_t convertTileToPixel(uint32_t number);
    //--------------------------------------------------------------------------
    uint32_t convertPixelToTile(uint32_t number);
    //--------------------------------------------------------------------------
    bool isFinished();
    //--------------------------------------------------------------------------
    size_t getWinnerTeam();
    //--------------------------------------------------------------------------
    //**************************************************************************
    // MOVE AND ATTACK
    //**************************************************************************
    //--------------------------------------------------------------------------
    msg_t moveUnitTo(uint32_t x, uint32_t y, size_t idUnit);
    //--------------------------------------------------------------------------
    msg_t attackUnit(size_t idShooter, size_t idTarget);
    //--------------------------------------------------------------------------
    msg_t attackObject(size_t idShooter, size_t idTarget);
    //--------------------------------------------------------------------------
    //**************************************************************************
    // ADD AND GET UNITS AND MUNITIONS
    //**************************************************************************
    //--------------------------------------------------------------------------
    unitsMap& getUnits();
    //--------------------------------------------------------------------------
    Unit* getUnit(size_t id);
    //--------------------------------------------------------------------------
    void addNewUnit(size_t id, Unit* unit);
    //--------------------------------------------------------------------------
    Armament* getMunition(size_t id);
    //--------------------------------------------------------------------------
    munitionsMap& getMunitions();
    //--------------------------------------------------------------------------
    //**************************************************************************
    // COLLECT TRASH
    //**************************************************************************
    //--------------------------------------------------------------------------
    void cleanModel();
    //--------------------------------------------------------------------------
    void cleanUnits();
    //--------------------------------------------------------------------------
    void cleanMunitions();
    //--------------------------------------------------------------------------
    void cleanObjects();
    //--------------------------------------------------------------------------
    void unitDie(size_t id);
    //--------------------------------------------------------------------------
    void munitionDie(size_t id);
    //--------------------------------------------------------------------------
    void objectDie(size_t id);
    //--------------------------------------------------------------------------
 private :
    //--------------------------------------------------------------------------
    void moveUntil(
            const Node& dst, size_t idUnit, float distance, double* time);
    //--------------------------------------------------------------------------
    void validateUnitTasksAndState(Unit& aUnit);
    //--------------------------------------------------------------------------
    //--------------------------------------------------------------------------
    //**************************************************************************
    // MONITORING UNITS CURRENT STATE AND TERRITORY CAPTURE
    //**************************************************************************
    //--------------------------------------------------------------------------
    void monitoring(Unit& aUnit);
    //--------------------------------------------------------------------------
    void territoryCapture(Unit &aUnit);
    //--------------------------------------------------------------------------
    //**************************************************************************
    // COLLECT TRASH
    //**************************************************************************
    //--------------------------------------------------------------------------
    void refreshUnitsTasks(Unit& aUnit);
    //--------------------------------------------------------------------------
    void refreshMunitionTasks(Armament& aMunition);
    //--------------------------------------------------------------------------
    void clearUnitTasks(Unit& aUnit);
    //--------------------------------------------------------------------------
    void killUnit(Unit& aUnit);
    //--------------------------------------------------------------------------
    void killMunition(size_t id);
    //--------------------------------------------------------------------------
    void killObject(size_t id);
    //--------------------------------------------------------------------------
};
//------------------------------------------------------------------------------
#endif  // GAME_H
