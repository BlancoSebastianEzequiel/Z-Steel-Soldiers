// "Copyright [2017] <Copyright SebastianBlanco>"
//------------------------------------------------------------------------------
#ifndef _HOME_SEBASTIAN_CLIONPROJECTS_TPGRUPAL_SERVERGAME_H_
#define _HOME_SEBASTIAN_CLIONPROJECTS_TPGRUPAL_SERVERGAME_H_
//------------------------------------------------------------------------------
class ServerPlayer;
class ServerUnit;
class ServerTask;
class ServerNodePath;
class ServerTeam;
class ServerArmament;
class ClientProxyGame;
class ServerProxyClient;
//------------------------------------------------------------------------------
#include <cstddef>
#include <vector>
#include <string>
#include <cstdint>
#include <queue>
#include <stack>
#include <mutex>
#include "../maps/serverMap.h"
#include "../../libs/Dicc.h"
#include "../../libs/Heap.h"
#include "../../libs/Parser.h"
#include "../interpreter/serverInterpreter.h"
//------------------------------------------------------------------------------
typedef std::queue<ServerNodePath*> Path;
typedef Dicc<size_t , ServerUnit*> unitsMap;
typedef Dicc<size_t, ServerArmament*> munitionsMap;
//------------------------------------------------------------------------------
class ServerGame {
 public :
    uint32_t unitsQuant;
    uint32_t munitionQuant;
    uint32_t playersQuant;
    ServerMap gameMap;
 private :
    unitsMap units;
    Dicc<size_t, ServerPlayer*> players;
    munitionsMap munitions;
    Dicc<size_t, ServerTeam*> teams;
    bool finish;
    Heap<ServerTask*> tasks;
    unitsMap deadUnits;
    munitionsMap impactedMunitions;
    objectsMap brokenObjects;
    ServerInterpreter interpreter;
    std::vector<std::string> initialModel;
    std::vector<std::string> model;
    std::mutex aMutex;
 public :
    //--------------------------------------------------------------------------
    explicit ServerGame(char* mapFileName);
    //--------------------------------------------------------------------------
    ~ServerGame();
    //--------------------------------------------------------------------------
    //**************************************************************************
    // COMMUNICATION
    //**************************************************************************
    //--------------------------------------------------------------------------
    void receivePetition(std::string petition);
    //--------------------------------------------------------------------------
    const std::vector<std::string> getModel();
    //--------------------------------------------------------------------------
    const std::vector<std::string> getInitialModel();
    //--------------------------------------------------------------------------
    //**************************************************************************
    // CREATE PLAYER AND UNITS
    //**************************************************************************
    //--------------------------------------------------------------------------
    size_t createPlayer(size_t idTeam);
    //--------------------------------------------------------------------------
    void killPlayer(size_t idPlayer);
    //--------------------------------------------------------------------------
    ServerPlayer* getPlayer(size_t idPlayer);
    //--------------------------------------------------------------------------
    void createRobotGrunt(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createRobotLaser(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createRobotTough(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createRobotSniper(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createRobotPyro(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createRobotPsycho(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createVehicleMML(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createVehicleHeavyTank(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createVehicleLightTank(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createVehicleMediumTank(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createVehicleJeep(size_t idBuilding);
    //--------------------------------------------------------------------------
    void createMunitionBullets(size_t idUnit);
    //--------------------------------------------------------------------------
    void createMunitionHighCaliberProjectiles(size_t idUnit);
    //--------------------------------------------------------------------------
    void createMunitionFlamethrower(size_t idUnit);
    //--------------------------------------------------------------------------
    void createMunitionMissiles(size_t idUnit);
    //--------------------------------------------------------------------------
    void createMunitionLaser(size_t idUnit);
    //--------------------------------------------------------------------------
    void update();
    //--------------------------------------------------------------------------
    uint32_t convertTileToPixel(uint32_t number);
    //--------------------------------------------------------------------------
    uint32_t convertPixelToTile(uint32_t number);
    //--------------------------------------------------------------------------
    bool isFinished();
    //--------------------------------------------------------------------------
    size_t getWinnerTeam();
    //--------------------------------------------------------------------------
    //**************************************************************************
    // MOVE AND ATTACK
    //**************************************************************************
    //--------------------------------------------------------------------------
    void moveUnitTo(uint32_t x, uint32_t y, size_t idUnit);
    //--------------------------------------------------------------------------
    void attackUnit(size_t idShooter, size_t idTarget);
    //--------------------------------------------------------------------------
    void attackObject(size_t idShooter, size_t idTarget);
    //--------------------------------------------------------------------------
    //**************************************************************************
    // ADD AND GET UNITS AND MUNITIONS
    //**************************************************************************
    //--------------------------------------------------------------------------
    unitsMap& getUnits();
    //--------------------------------------------------------------------------
    ServerUnit* getUnit(size_t id);
    //--------------------------------------------------------------------------
    void addNewUnit(size_t id, ServerUnit* unit);
    //--------------------------------------------------------------------------
    ServerArmament* getMunition(size_t id);
    //--------------------------------------------------------------------------
    munitionsMap& getMunitions();
    //--------------------------------------------------------------------------
    //**************************************************************************
    // COLLECT TRASH
    //**************************************************************************
    //--------------------------------------------------------------------------
    void cleanModel();
    //--------------------------------------------------------------------------
    void cleanUnits();
    //--------------------------------------------------------------------------
    void cleanMunitions();
    //--------------------------------------------------------------------------
    void cleanObjects();
    //--------------------------------------------------------------------------
    void unitDie(size_t id);
    //--------------------------------------------------------------------------
    void munitionDie(size_t id);
    //--------------------------------------------------------------------------
    void objectDie(size_t id);
    //--------------------------------------------------------------------------
 private :
    //--------------------------------------------------------------------------
    void moveUntil(
            const ServerNode& dst, size_t idUnit, float distance, double* time);
    //--------------------------------------------------------------------------
    void validateUnitTasksAndState(ServerUnit& aUnit);
    //--------------------------------------------------------------------------
    //--------------------------------------------------------------------------
    //**************************************************************************
    // MONITORING UNITS CURRENT STATE AND TERRITORY CAPTURE
    //**************************************************************************
    //--------------------------------------------------------------------------
    void monitoring(ServerUnit& aUnit);
    //--------------------------------------------------------------------------
    void territoryCapture(ServerUnit &aUnit);
    //--------------------------------------------------------------------------
    //**************************************************************************
    // COLLECT TRASH
    //**************************************************************************
    //--------------------------------------------------------------------------
    void refreshUnitsTasks(ServerUnit& aUnit);
    //--------------------------------------------------------------------------
    void refreshMunitionTasks(ServerArmament& aMunition);
    //--------------------------------------------------------------------------
    void clearUnitTasks(ServerUnit& aUnit);
    //--------------------------------------------------------------------------
    void killUnit(ServerUnit& aUnit);
    //--------------------------------------------------------------------------
    void killMunition(size_t id);
    //--------------------------------------------------------------------------
    void killObject(size_t id);
    //--------------------------------------------------------------------------
};
//------------------------------------------------------------------------------
#endif  // _HOME_SEBASTIAN_CLIONPROJECTS_TPGRUPAL_SERVERGAME_H_
